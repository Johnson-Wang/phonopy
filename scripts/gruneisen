#!/usr/bin/env python

# Copyright (C) 2012 Atsushi Togo
# All rights reserved.
#
# This file is part of phonopy.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
#
# * Neither the name of the phonopy project nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import sys
from phonopy import Phonopy
from phonopy import PhonopyGruneisen
from phonopy.interface.vasp import read_vasp
from phonopy.file_IO import parse_FORCE_SETS, parse_BORN, parse_FORCE_CONSTANTS
import numpy as np

def fracval(frac):
    if frac.find('/') == -1:
        return float(frac)
    else:
        x = frac.split('/')
        return float(x[0]) / float(x[1])

def get_phonon(cell_filename,
               force_sets_filename,
               dim,
               primitive_axis=np.eye(3),
               born_filename=None,
               symprec=1e-5):
    cell = read_vasp(cell_filename)
    phonon = Phonopy(cell, dim, is_auto_displacements=False, symprec=symprec)
    force_sets = parse_FORCE_SETS(phonon.get_supercell().get_number_of_atoms(),
                                  filename=force_sets_filename)
    set_of_forces = [x.get_forces() for x in force_sets]
    displacements = [[x.get_atom_number()] + list(x.get_displacement())
                     for x in force_sets]
    phonon.set_displacements(displacements)
    
    is_nac = False
    if born_filename:
        is_nac = True
    phonon.set_post_process(primitive_axis,
                            set_of_forces,
                            is_nac=is_nac)
    if born_filename:
        phonon.set_nac_params(parse_BORN(phonon.get_primitive(),
                                         filename=born_filename))
    return phonon

def get_phonon_from_force_constants(cell_filename,
                                    force_constants_filename,
                                    dim,
                                    primitive_axis=np.eye(3),
                                    born_filename=None):
    cell = read_vasp(cell_filename)
    phonon = Phonopy(cell, dim, is_auto_displacements=False)
    force_constants = parse_FORCE_CONSTANTS(force_constants_filename)
    is_nac = False
    if born_filename:
        is_nac = True
    phonon.set_post_process(primitive_axis,
                            force_constants=force_constants,
                            is_nac=is_nac)
    if born_filename:
        phonon.set_nac_params(parse_BORN(phonon.get_primitive(),
                                         filename=born_filename))
    return phonon

from optparse import OptionParser
parser = OptionParser()
parser.set_defaults(band_paths=None,
                    cell_poscar=None,
                    color_scheme=None,
                    cutoff_frequency=None,
                    cutoff_wave_vector=1e-4,
                    is_nac=False,
                    plot_graph=False,
                    reads_force_constants=False,                    
                    band_points=51,
                    marker='o',
                    markersize=None,
                    primitive_axis=None,
                    sampling_mesh=None,
                    save_graph=False,
                    supercell_dimension=None,
                    title=None)
parser.add_option("--band_points", dest="band_points", type="int",
                   help="Number of sampling points in a segment of band path")
parser.add_option("--pa", "--primitive_axis", dest="primitive_axis",
                  action="store", type="string",
                  help="Same as PRIMITIVE_AXIS tags")
parser.add_option("--band", dest="band_paths",
                  action="store", type="string",
                  help="Band paths in reduced coordinates")
parser.add_option("--mp", "--mesh", dest="sampling_mesh",
                  action="store", type="string",
                  help="Sampling mesh")
parser.add_option("--dim", dest="supercell_dimension",
                  action="store", type="string",
                  help="Same behavior as DIM tag")
parser.add_option("--nac", dest="is_nac",
                  action="store_true",
                  help="Non-analytical term correction")
parser.add_option("-p", "--plot", dest="plot_graph",
                  action="store_true",
                  help="Plot data")
parser.add_option("--readfc", dest="reads_force_constants",
                  action="store_true",
                  help="Read FORCE_CONSTANTS")
parser.add_option("-c", "--cell", dest="cell_poscar",
                  action="store", type="string",
                  help="Read unit cell", metavar="FILE")
parser.add_option("-s", "--save", dest="save_graph",
                  action="store_true",
                  help="Save plot data in pdf")
parser.add_option("--color", dest="color_scheme",
                  action="store", type="string",
                  help="Color scheme")
parser.add_option("--q_cutoff", dest="cutoff_wave_vector", type="float",
                  help="Acoustic modes inside cutoff wave vector is treated.")
parser.add_option("--cutoff", dest="cutoff_frequency", type="float",
                  help="Plot above this cutoff frequency for mesh sampling mode.")
parser.add_option("--marker", dest="marker",
                  action="store", type="string",
                  help="Marker for plot (matplotlib)")
parser.add_option("--markersize", dest="markersize", type="float",
                  help="Markersize for plot in points (matplotlib)")
parser.add_option("-o", "--output", dest="output_filename",
                  action="store", type="string",
                  help="Output filename of PDF plot")
parser.add_option("-t", "--title", dest="title", action="store",
                  type="string", help="Title of plot")
parser.add_option("--tolerance", dest="symprec", type="float",
                  help="Symmetry tolerance to search")
(options, args) = parser.parse_args()

if len(args) is not 3:
    sys.stderr.write("Three directory names (original, plus, minus) "
                     "have to be spefied.\n")
    sys.exit(1)

if options.primitive_axis:
    primitive_axis = np.array(
        [fracval(x) for x in options.primitive_axis.split()]).reshape(3, 3)
else:
    primitive_axis = np.eye(3)

if options.supercell_dimension:
    dim = [int(x) for x in options.supercell_dimension.split()]
    if len(dim) == 9:
        dim = np.array(dim).reshape(3, 3)
    elif len(dim) == 3:
        dim = np.diag(dim)
    else:
        print "Number of elements of --dim option has to be 3 or 9."
        sys.exit(1)
    if np.linalg.det(dim) < 1:
        print "Determinant of supercell matrix has to be positive."
        sys.exit(1)
else:
    print "--dim option has to be specified."
    sys.exit(1)

if options.cell_poscar:
    cell_filename = options.cell_poscar
else:
    cell_filename = "POSCAR"
    
phonons = []
for i in range(3):
    directory = args[i]
    if options.is_nac:
        born_filename = "%s/BORN" % directory
    else:
        born_filename = None
    
    if options.reads_force_constants:
        phonons.append(get_phonon_from_force_constants(
                "%s/%s" % (directory, cell_filename),
                "%s/FORCE_CONSTANTS" % directory,
                dim,
                primitive_axis=primitive_axis,
                born_filename=born_filename))
    else:
        phonons.append(get_phonon("%s/%s" % (directory, cell_filename),
                                  "%s/FORCE_SETS" % directory,
                                  dim,
                                  primitive_axis=primitive_axis,
                                  born_filename=born_filename,
                                  symprec=options.symprec))

gruneisen = PhonopyGruneisen(phonons[0], # equilibrium
                             phonons[1], # plus
                             phonons[2]) # minus

if options.plot_graph:
    if options.save_graph:
        import matplotlib as mpl
        mpl.use('Agg')
        
if options.band_paths:
    band_paths = []
    for path_str in options.band_paths.split(','):
        paths = np.array(
            [fracval(x) for x in path_str.split()]).reshape(-1, 3)
        for i in range(len(paths) - 1):
            band_paths.append([paths[i], paths[i + 1]])

    gruneisen.set_band_structure(band_paths,
                                 options.band_points)
    gruneisen.write_yaml_band_structure()
    if options.plot_graph:
        plt = gruneisen.plot_band_structure(epsilon=options.cutoff_wave_vector,
                                            color_scheme=options.color_scheme)
        if options.title is not None:
            plt.suptitle(options.title)


elif options.sampling_mesh:
    mesh_numbers = np.array([int(x) for x in options.sampling_mesh.split()])
    gruneisen.set_mesh(mesh_numbers)
    gruneisen.write_yaml_mesh()
    
    if options.plot_graph:
        plt = gruneisen.plot_mesh(cutoff_frequency=options.cutoff_frequency,
                                  color_scheme=options.color_scheme,
                                  marker=options.marker,
                                  markersize=options.markersize)
        if options.title is not None:
            plt.suptitle(options.title)
else:
    pass

if options.plot_graph:
    if options.save_graph:
        if options.output_filename:
            plt.savefig(options.output_filename)
        else:
            plt.savefig("gruneisen.pdf")
    else:
        plt.show()
